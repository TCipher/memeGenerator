{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\memeGenerator\\\\src\\\\components\\\\Meme.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport memesData from \"../memesData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  /**\r\n   * Challenge: \r\n   * 1. Set up the text inputs to save to\r\n   *    the `topText` and `bottomText` state variables.\r\n   * 2. Replace the hard-coded text on the image with\r\n   *    the text being saved to state.\r\n   */\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setallMemeImages] = React.useState(memesData);\n\n  function getMemeImage() {\n    const memesArray = allMemeImages.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  function handleChange(event) {\n    const {\n      type,\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => {\n      return { ...prevMeme,\n        [name]: value\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form--input\",\n        placeholder: \"top-text\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form--input\",\n        placeholder: \"bottom--text\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image  \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.randomImage,\n      className: \"meme--image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"fWUztD66bfsyEFSsqsd33YfWdL8=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","memesData","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","setallMemeImages","getMemeImage","memesArray","data","memes","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","type","name","value","target"],"sources":["C:/Users/user/memeGenerator/src/components/Meme.js"],"sourcesContent":["import React from \"react\"\r\nimport memesData from \"../memesData\"\r\n\r\nexport default function Meme(){\r\n    /**\r\n     * Challenge: \r\n     * 1. Set up the text inputs to save to\r\n     *    the `topText` and `bottomText` state variables.\r\n     * 2. Replace the hard-coded text on the image with\r\n     *    the text being saved to state.\r\n     */\r\n    const [meme,setMeme] = React.useState({\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImage: \"http://i.imgflip.com/1bij.jpg\"\r\n    })\r\n    const [allMemeImages, setallMemeImages] = React.useState(memesData)\r\n\r\n     \r\n      function getMemeImage() {\r\n        const memesArray = allMemeImages.data.memes\r\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\r\n        const url = memesArray[randomNumber].url\r\n        setMeme(prevMeme =>\r\n            ({\r\n                ...prevMeme,\r\n               randomImage: url\r\n\r\n            }))\r\n        \r\n    }\r\n    function handleChange(event){\r\n        const {type, name, value} = event.target\r\n        setMeme(prevMeme => {\r\n            return {\r\n                ...prevMeme,\r\n                [name]: value\r\n\r\n            }\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <main>\r\n            <div className=\"form\">\r\n                    <input\r\n                    type=\"text\"\r\n                    className=\"form--input\"\r\n                    placeholder=\"top-text\"\r\n                    name = \"topText\"\r\n                    value = {meme.topText}\r\n                    onChange ={handleChange}\r\n                    />\r\n                    <input \r\n                    type=\"text\" \r\n                     className=\"form--input\"\r\n                     placeholder=\"bottom--text\"\r\n                     name = \"bottomText\"\r\n                     value = {meme.bottomText}\r\n                     onChange ={handleChange}\r\n                    />\r\n                    <button className=\"form--button\" onClick ={getMemeImage}>Get a new meme image  ðŸ–¼</button>\r\n            </div>\r\n            <img src={meme.randomImage}  className=\"meme--image\"/>\r\n            \r\n        </main>\r\n    )\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,cAAtB;;AAEA,eAAe,SAASC,IAAT,GAAe;EAAA;;EAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBJ,KAAK,CAACK,QAAN,CAAe;IAClCC,OAAO,EAAE,EADyB;IAElCC,UAAU,EAAE,EAFsB;IAGlCC,WAAW,EAAE;EAHqB,CAAf,CAAvB;EAKA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,KAAK,CAACK,QAAN,CAAeJ,SAAf,CAA1C;;EAGE,SAASU,YAAT,GAAwB;IACtB,MAAMC,UAAU,GAAGH,aAAa,CAACI,IAAd,CAAmBC,KAAtC;IACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,UAAU,CAACO,MAAtC,CAArB;IACA,MAAMC,GAAG,GAAGR,UAAU,CAACG,YAAD,CAAV,CAAyBK,GAArC;IACAhB,OAAO,CAACiB,QAAQ,KACX,EACG,GAAGA,QADN;MAEEb,WAAW,EAAEY;IAFf,CADW,CAAT,CAAP;EAOH;;EACD,SAASE,YAAT,CAAsBC,KAAtB,EAA4B;IACxB,MAAM;MAACC,IAAD;MAAOC,IAAP;MAAaC;IAAb,IAAsBH,KAAK,CAACI,MAAlC;IACAvB,OAAO,CAACiB,QAAQ,IAAI;MAChB,OAAO,EACH,GAAGA,QADA;QAEH,CAACI,IAAD,GAAQC;MAFL,CAAP;IAKH,CANM,CAAP;EAOH;;EAED,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACQ;QACA,IAAI,EAAC,MADL;QAEA,SAAS,EAAC,aAFV;QAGA,WAAW,EAAC,UAHZ;QAIA,IAAI,EAAG,SAJP;QAKA,KAAK,EAAIvB,IAAI,CAACG,OALd;QAMA,QAAQ,EAAGgB;MANX;QAAA;QAAA;QAAA;MAAA,QADR,eASQ;QACA,IAAI,EAAC,MADL;QAEC,SAAS,EAAC,aAFX;QAGC,WAAW,EAAC,cAHb;QAIC,IAAI,EAAG,YAJR;QAKC,KAAK,EAAInB,IAAI,CAACI,UALf;QAMC,QAAQ,EAAGe;MANZ;QAAA;QAAA;QAAA;MAAA,QATR,eAiBQ;QAAQ,SAAS,EAAC,cAAlB;QAAiC,OAAO,EAAGX,YAA3C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBR;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAoBI;MAAK,GAAG,EAAER,IAAI,CAACK,WAAf;MAA6B,SAAS,EAAC;IAAvC;MAAA;MAAA;MAAA;IAAA,QApBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAyBH;;GAhEuBN,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}